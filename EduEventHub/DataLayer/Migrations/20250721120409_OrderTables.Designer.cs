// <auto-generated />
using System;
using DataLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250721120409_OrderTables")]
    partial class OrderTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ef1ebe7-f79f-4cda-ad06-b7e1ff9c6a9a",
                            Email = "super@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Super",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "super@gmail.com",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDvR++jDfN0K1vbeP7/0ywUqV1q9UighbTLLxWCDLZWWrjRS7LhQU8zvI2hj2+I/iw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74480221-d171-4da4-8ffd-429a6c0d87e6",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Cart", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("DataLayer.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 807, DateTimeKind.Utc).AddTicks(7908),
                            Description = "Hands-on learning sessions",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Workshops",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 807, DateTimeKind.Utc).AddTicks(7914)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 807, DateTimeKind.Utc).AddTicks(8685),
                            Description = "Educational talks by experts",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Lectures",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 807, DateTimeKind.Utc).AddTicks(8686)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 807, DateTimeKind.Utc).AddTicks(8706),
                            Description = "Cultural and scientific displays",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Exhibitions",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 807, DateTimeKind.Utc).AddTicks(8706)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 807, DateTimeKind.Utc).AddTicks(8707),
                            Description = "Multi-day events with multiple speakers",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Conferences",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 807, DateTimeKind.Utc).AddTicks(8708)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 807, DateTimeKind.Utc).AddTicks(8708),
                            Description = "Focused discussions on specific topics",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Seminars",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 807, DateTimeKind.Utc).AddTicks(8709)
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableTickets")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableTickets = 0,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 808, DateTimeKind.Utc).AddTicks(8456),
                            Description = "A hands-on workshop to learn Python programming from scratch.",
                            EndDate = new DateTime(2024, 10, 16, 16, 0, 0, 0, DateTimeKind.Utc),
                            ImgPath = "assets/images/gallery/gallery-less-eight.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Price = 50.0,
                            StartDate = new DateTime(2024, 10, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Python Workshop",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 808, DateTimeKind.Utc).AddTicks(8457)
                        },
                        new
                        {
                            Id = 2,
                            AvailableTickets = 0,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(672),
                            Description = "Explore the future of artificial intelligence with leading experts.",
                            EndDate = new DateTime(2025, 1, 20, 17, 0, 0, 0, DateTimeKind.Utc),
                            ImgPath = "assets/images/gallery/gallery-full-seven.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Price = 30.0,
                            StartDate = new DateTime(2025, 1, 20, 14, 0, 0, 0, DateTimeKind.Utc),
                            Title = "AI Lecture Series",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(672)
                        },
                        new
                        {
                            Id = 3,
                            AvailableTickets = 0,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(678),
                            Description = "Showcasing the latest innovations in technology.",
                            EndDate = new DateTime(2025, 6, 12, 18, 0, 0, 0, DateTimeKind.Utc),
                            ImgPath = "assets/images/background/cta-ticket-bg.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Price = 20.0,
                            StartDate = new DateTime(2025, 6, 10, 9, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Tech Exhibition 2025",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(679)
                        },
                        new
                        {
                            Id = 4,
                            AvailableTickets = 0,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(682),
                            Description = "A conference on cloud solutions and scalability.",
                            EndDate = new DateTime(2023, 11, 7, 17, 0, 0, 0, DateTimeKind.Utc),
                            ImgPath = "assets/images/background/homepage-one-banner.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Price = 100.0,
                            StartDate = new DateTime(2023, 11, 5, 9, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Cloud Computing Conference",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(682)
                        },
                        new
                        {
                            Id = 5,
                            AvailableTickets = 0,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(685),
                            Description = "Learn about the latest trends in cybersecurity.",
                            EndDate = new DateTime(2026, 3, 15, 15, 0, 0, 0, DateTimeKind.Utc),
                            ImgPath = "assets/images/background/timer-bg.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Price = 40.0,
                            StartDate = new DateTime(2026, 3, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Cybersecurity Seminar",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(685)
                        });
                });

            modelBuilder.Entity("DataLayer.Models.EventAgenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventAgendas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(1673),
                            Date = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(1673)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(2564),
                            Date = new DateTime(2024, 10, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(2565)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(2600),
                            Date = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(2600)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(2602),
                            Date = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 3,
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(2602)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(2604),
                            Date = new DateTime(2025, 6, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 3,
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(2604)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(2606),
                            Date = new DateTime(2023, 11, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4,
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(2606)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(2608),
                            Date = new DateTime(2026, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 5,
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(2608)
                        });
                });

            modelBuilder.Entity("DataLayer.Models.EventContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventAgendaId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SpeakerId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventAgendaId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("EventContent");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(3389),
                            EventAgendaId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            SpeakerId = 1,
                            StartTime = new TimeOnly(10, 0, 0),
                            Subject = "Introduction to Python Programming",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(3390)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4874),
                            EventAgendaId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            SpeakerId = 3,
                            StartTime = new TimeOnly(14, 0, 0),
                            Subject = "Python for Data Science",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4874)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4877),
                            EventAgendaId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            SpeakerId = 1,
                            StartTime = new TimeOnly(11, 0, 0),
                            Subject = "Advanced Python Techniques",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4878)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4879),
                            EventAgendaId = 3,
                            IsActive = true,
                            IsDeleted = false,
                            SpeakerId = 2,
                            StartTime = new TimeOnly(14, 0, 0),
                            Subject = "Machine Learning Fundamentals",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4880)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4881),
                            EventAgendaId = 3,
                            IsActive = true,
                            IsDeleted = false,
                            SpeakerId = 4,
                            StartTime = new TimeOnly(16, 0, 0),
                            Subject = "AI in Cloud Computing",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4881)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4883),
                            EventAgendaId = 4,
                            IsActive = true,
                            IsDeleted = false,
                            SpeakerId = 1,
                            StartTime = new TimeOnly(9, 30, 0),
                            Subject = "Innovations in Software Development",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4883)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4885),
                            EventAgendaId = 4,
                            IsActive = true,
                            IsDeleted = false,
                            SpeakerId = 2,
                            StartTime = new TimeOnly(13, 0, 0),
                            Subject = "AI-Powered Innovations",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4885)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4886),
                            EventAgendaId = 5,
                            IsActive = true,
                            IsDeleted = false,
                            SpeakerId = 4,
                            StartTime = new TimeOnly(10, 0, 0),
                            Subject = "Cloud Solutions Showcase",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4886)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4887),
                            EventAgendaId = 6,
                            IsActive = true,
                            IsDeleted = false,
                            SpeakerId = 4,
                            StartTime = new TimeOnly(9, 0, 0),
                            Subject = "Scalable Cloud Architectures",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4888)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4958),
                            EventAgendaId = 6,
                            IsActive = true,
                            IsDeleted = false,
                            SpeakerId = 5,
                            StartTime = new TimeOnly(11, 30, 0),
                            Subject = "Securing Cloud Infrastructure",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4958)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4961),
                            EventAgendaId = 7,
                            IsActive = true,
                            IsDeleted = false,
                            SpeakerId = 5,
                            StartTime = new TimeOnly(10, 0, 0),
                            Subject = "Ethical Hacking Techniques",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(4961)
                        });
                });

            modelBuilder.Entity("DataLayer.Models.EventOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventOrders");
                });

            modelBuilder.Entity("DataLayer.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DataLayer.Models.Speaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Speakers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Software engineering expert with over 10 years of experience.",
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 808, DateTimeKind.Utc).AddTicks(5654),
                            ImgPath = "assets/images/speakers/single-speaker.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Ahmed Khaled",
                            Specialization = "Software Development",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 808, DateTimeKind.Utc).AddTicks(5655)
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Data science enthusiast and AI researcher.",
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 808, DateTimeKind.Utc).AddTicks(6864),
                            ImgPath = "assets/images/speakers/speaker-five.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Mohamed Ali",
                            Specialization = "Data Science",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 808, DateTimeKind.Utc).AddTicks(6865)
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Specialist in educational workshops with a focus on interactive learning.",
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 808, DateTimeKind.Utc).AddTicks(6867),
                            ImgPath = "assets/images/speakers/speaker-full-five.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Omar Mostafa",
                            Specialization = "Education",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 808, DateTimeKind.Utc).AddTicks(6867)
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Expert in cloud computing and distributed systems.",
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 808, DateTimeKind.Utc).AddTicks(6868),
                            ImgPath = "assets/images/speakers/speaker-full-one.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Hassan Ibrahim",
                            Specialization = "Cloud Computing",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 808, DateTimeKind.Utc).AddTicks(6868)
                        },
                        new
                        {
                            Id = 5,
                            Bio = "Cybersecurity specialist with a focus on ethical hacking.",
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 808, DateTimeKind.Utc).AddTicks(6871),
                            ImgPath = "assets/images/speakers/speaker-full-three.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Youssef Sami",
                            Specialization = "Cybersecurity",
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 808, DateTimeKind.Utc).AddTicks(6871)
                        });
                });

            modelBuilder.Entity("DataLayer.Models.SpeakerSocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Platform")
                        .HasColumnType("int");

                    b.Property<int>("SpeakerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SpeakerId");

                    b.ToTable("SpeakerSocialMedias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(5825),
                            IsActive = true,
                            IsDeleted = false,
                            Platform = 2,
                            SpeakerId = 1,
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(5826),
                            Url = "https://linkedin.com/in/ahmedkhaled"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(6858),
                            IsActive = true,
                            IsDeleted = false,
                            Platform = 1,
                            SpeakerId = 1,
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(6858),
                            Url = "https://twitter.com/ahmedkhaled"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(6862),
                            IsActive = true,
                            IsDeleted = false,
                            Platform = 1,
                            SpeakerId = 2,
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(6863),
                            Url = "https://twitter.com/mohamedali"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(6866),
                            IsActive = true,
                            IsDeleted = false,
                            Platform = 3,
                            SpeakerId = 3,
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(6866),
                            Url = "https://instagram.com/omarmostafa"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(6868),
                            IsActive = true,
                            IsDeleted = false,
                            Platform = 2,
                            SpeakerId = 4,
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(6869),
                            Url = "https://linkedin.com/in/hassanibrahim"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(6871),
                            IsActive = true,
                            IsDeleted = false,
                            Platform = 1,
                            SpeakerId = 5,
                            UpdatedAt = new DateTime(2025, 7, 21, 12, 4, 4, 809, DateTimeKind.Utc).AddTicks(6872),
                            Url = "https://twitter.com/youssefsami"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Wishlist", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "6f34ea44-06c3-4091-ab7a-0b1c761320e1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "924a141b-6abe-401e-b537-42088aa07ff0",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Cart", b =>
                {
                    b.HasOne("DataLayer.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.Event", b =>
                {
                    b.HasOne("DataLayer.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DataLayer.Models.EventAgenda", b =>
                {
                    b.HasOne("DataLayer.Models.Event", "Event")
                        .WithMany("Agenda")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DataLayer.Models.EventContent", b =>
                {
                    b.HasOne("DataLayer.Models.EventAgenda", "EventAgenda")
                        .WithMany("EventAgendaContents")
                        .HasForeignKey("EventAgendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Speaker", "Speaker")
                        .WithMany("EventContents")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventAgenda");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("DataLayer.Models.EventOrder", b =>
                {
                    b.HasOne("DataLayer.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataLayer.Models.Order", b =>
                {
                    b.HasOne("DataLayer.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.SpeakerSocialMedia", b =>
                {
                    b.HasOne("DataLayer.Models.Speaker", null)
                        .WithMany("SocialMedias")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Models.Wishlist", b =>
                {
                    b.HasOne("DataLayer.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataLayer.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataLayer.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataLayer.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Models.Event", b =>
                {
                    b.Navigation("Agenda");
                });

            modelBuilder.Entity("DataLayer.Models.EventAgenda", b =>
                {
                    b.Navigation("EventAgendaContents");
                });

            modelBuilder.Entity("DataLayer.Models.Speaker", b =>
                {
                    b.Navigation("EventContents");

                    b.Navigation("SocialMedias");
                });
#pragma warning restore 612, 618
        }
    }
}
